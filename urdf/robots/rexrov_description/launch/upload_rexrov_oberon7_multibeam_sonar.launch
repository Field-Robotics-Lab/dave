<?xml version="1.0"?>

<launch>
  <arg name="debug" default="0"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="-20"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="namespace" default="rexrov"/>
  <arg name="use_ned_frame" default="false"/>

  <arg name="sonar_name" default="blueview_p900"/>
  <arg name="gpu_ray" default="false"/>
  <arg name="maxDistance" default="10"/>
  <arg name="fidelity" default="500"/>
  <arg name="raySkips" default="1"/>
  <arg name="sonar_image_topic" default="sonar_image"/>
  <arg name="sonar_image_raw_topic" default="sonar_image_raw"/>
  <arg name="plotScaler" default="0"/>
  <arg name="sensorGain" default="0.04"/>
  <arg name="ray_visual" default="true"/>
  <arg name="writeLog" default="false"/>
  <arg name="writeFrameInterval" default="5"/>

  <group ns="$(arg namespace)">
    <group if="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find rexrov_description)/urdf/rexrov_oberon7_multibeam_sonar.xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)
          inertial_reference_frame:=world_ned
          sonar_name:=$(arg sonar_name) gpu_ray:=$(arg gpu_ray) robot_name:=$(arg namespace)
          sonar_image_topic:=$(arg sonar_image_topic) sonar_image_raw_topic:=$(arg sonar_image_raw_topic) debug:=$(arg debug)
          maxDistance:=$(arg maxDistance) raySkips:=$(arg raySkips) plotScaler:=$(arg plotScaler) fidelity:=$(arg fidelity)
          sensorGain:=$(arg sensorGain) writeLog:=$(arg writeLog) writeFrameInterval:=$(arg writeFrameInterval)
          ray_visual:=$(arg ray_visual)" />
    </group>

    <group unless="$(arg use_ned_frame)">
      <param name="robot_description"
        command="$(find xacro)/xacro '$(find rexrov_description)/urdf/rexrov_oberon7_multibeam_sonar.xacro' --inorder
          debug:=$(arg debug)
          namespace:=$(arg namespace)
          inertial_reference_frame:=world
          sonar_name:=$(arg sonar_name) gpu_ray:=$(arg gpu_ray) robot_name:=$(arg namespace)
          sonar_image_topic:=$(arg sonar_image_topic) sonar_image_raw_topic:=$(arg sonar_image_raw_topic) debug:=$(arg debug)
          maxDistance:=$(arg maxDistance) raySkips:=$(arg raySkips) plotScaler:=$(arg plotScaler) fidelity:=$(arg fidelity)
          sensorGain:=$(arg sensorGain) writeLog:=$(arg writeLog) writeFrameInterval:=$(arg writeFrameInterval)
          ray_visual:=$(arg ray_visual)" />
    </group>
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
          args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Robot state publisher subscribes to the custom joint state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
  </group>

  <rosparam param="$(arg namespace)/arms/n_arms">
    1
  </rosparam>

  <rosparam param="$(arg namespace)/arms/names">
    [oberon7,]
  </rosparam>

  <group ns="$(arg namespace)/arms/oberon7">
    <rosparam file="$(find oberon7_description)/params/robot_config.yaml" command="load"/>
  </group>

  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace)"/>
    <arg name="world_frame" value="world"/>
    <arg name="child_frame_id" value="/$(arg namespace)/base_link"/>
  </include>

</launch>
